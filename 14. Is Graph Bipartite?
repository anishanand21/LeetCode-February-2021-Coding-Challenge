class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n);   // 0: uncolored; 1: color A; -1: color B
        
        queue<int> q;
        
        for(int i=0;i<n;i++) {
            if(color[i]) continue;
            
            // BFS with seed node i to color neighbors with opposite color
            color[i] = 1;
            for(q.push(i); !q.empty(); q.pop()) {
                int cur = q.front();
                for(int neighbor : graph[cur]) {
                    if(!color[neighbor]) {     // if uncolored, color with opposite color
                        color[neighbor] = -color[cur];
                        q.push(neighbor);
                    }
                    else if(color[neighbor] == color[cur]) {
                        return false;         // if already colored with same color, can't be bipartite!
                    }
                }
            }
        }
        return true;
    }
};
